#Start One Project
	
第一章、正则表达式入门

	基本元字符和一些基础认识

	* 	march all of the words
	.	march one words
	?	zero or one 
	+	more than one 

	^	line head
	$	line foot

	\	转义

	|	匹配任意分割的表达式

	[]	表示一个范围

	{}	代表前一个字段出现的次数

	()	将表达式分隔开来

	\num 引用前一个字段的匹配(反向引用)

	\< \>	单词分割符



	正则表达式术语汇总

	regex（正则表达式简称正则）

	匹配

	元字符

	流派（flavor）

	子表达式（subexpression）

	字符

    
第二章、Regex入门示例拓展
  Tips：Perl示例语言
    
    perl -w 仔细检查程序运行
    perl -m/Regex/  对正则表达式进行匹配
    perl -m/Regex/i 忽略大小写
    perl -s/Regex/Contents/ 替换


    括号的作用
    1、对正则表达式进行分组
    2、反向引用
    3、在perl中直接用$1-$n代表匹配上的表达式值
        $celsius =~ m/^([-+]?[0-9]+)(CF)$/
        $1=([-+]?[0-9]+)
        $2=(CF)
    4、如何阻止对括号内的内容进行变量保存和捕获
        (?:Regex)

    perl及其他正则表达式流派元字符
    \s  匹配任意空白字符
    \t  制表符
    \r  回车符
    \n  换行符
    \S  \s之外的任意字符相当于[^\s]
    \w  [a-zA-Z0-9]
    \W  除了\w外的任何字符[^a-zA-Z0-9]
    \d  [0-9]数字
    \D  除\d外的任何字符
        
        
    使用正则表达式修改文本
    
        环视（预匹配）
        (?=...)
        (?<=...)
        否定环视
        (?!...)
        (?<!...)


第三章、正则表达式的特性和流派概览
    
    Tips:工具（语言）不同正则表达式的写法和用法都有很大的不同
    1、元字符
    2、交互方式
    3、表达式如何应用到文本
    
    
    字符串字符编码和匹配模式
        1、每种语言都规定了自己的字符串元字符(\n \t)
        2、字符编码ASCII、unicode
            注意字符只是单字符还是字符序列

        3、正则模式和匹配模式
            不区分大小写的匹配模式
            宽松排列和注释模式
            点号通配模式
            增强的行锚点模式
              
              常见模式修饰符字母
               i   不区分大小写
               x   宽松排列和注释模式
               s   点号统配模式
               m   增强的行锚点模式

        4、POSIX字符组
            [:alnum:]   子母和数字
            [:alpha:]   字母
            [:blank:]   空格和制表符
            [:cntrl:]   控制字符
            [:digit:]   数字
            [:giaph:]   非空字符【空白字符和控制字符之外的字符】
            [:lower:]   小写字母
            [:upper:]   大写字母
            [:print:]   类似[:giaph:]但是包括空白字符
            [:punct:]   标点符号
            [:space:]   所有的空白字符
            [:xdigit:]  十六进制中允许出现的数字

            Tips：在应用时POSIX字符组都在分组中出现[],即[[:alnum:]]


            POSIX "collating序列" 方括号表示法[[.span-ll.]]
                ll视为一个字符

            POSIX 字符等价类方括号表示法：[[=n=]]

        5、锚点及其他零长度断言
            行字符串的起始位置^

        5、锚点及其他零长度断言
            行字符串的起始位置

        5、锚点及其他零长度断言
            行、字符串的起始位置^、\A

            行、字符串的結束位置$、\Z、\z

            匹配的起始位置（或者上一次匹配的结束位置）\G

            单词分界符：\b \B \< \>

            顺序环视(?=...) (?!...) 逆序环视(?<=...) (?<!...)
                Tips：注意需要环视的表达式长度限制

        6、注释和模式修饰符
            模式修饰符(?modifier),eg(?i)&&(?-i)
            (?i)very(?-i) //忽略very的大小写
            其他的修饰符还有m、x、s

                模式作用范围：(?modifier:...),eg(?i:...)只作用在括号内

            注释：(?#...) && #...


       7、文字文本范围：\Q...\E
            消除\E之外所有元字符的含义

       8、分组捕获条件判断和控制 

            捕获/分组括号：(...)&&\1,\2,...,\n
            (?:...)   //仅用于分组的括号

            命名捕获：(?<NAME>...)

            固化分组：(?>...)

            多选结构：...|...|...

            条件判断：(?if then | else)
            
            匹配优先量词：×,+,?,{num,num}

            区间：{min,max},\{min,max\}

            忽略优先量词：*?,+?,??,{num,num}?

            占有优先量词：*+,++,?+,{num,num}+

           
第四章、表达式的匹配原理

    正则引擎的分类
        NFA（非确定型有穷自动机）、DFA（确定型有穷自动机）
    
    本章的两条普适规则
    1、优先选择最左端的匹配结果
    2、标准的匹配量词是匹配优先的
      
    NFA引擎：表达式主导

    DFA引擎：文本主导
    



第五章、正则表达式实用技巧


第六章、打造高效正则表达式
